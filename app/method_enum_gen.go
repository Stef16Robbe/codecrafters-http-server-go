// Code generated by "enumer -type=Method"; DO NOT EDIT.

package main

import (
	"database/sql/driver"
	"encoding/json"
	"fmt"
)

const _MethodName = "GETPOSTPUTPATCH"

var _MethodIndex = [...]uint8{0, 3, 7, 10, 15}

func (i Method) String() string {
	if i < 0 || i >= Method(len(_MethodIndex)-1) {
		return fmt.Sprintf("Method(%d)", i)
	}
	return _MethodName[_MethodIndex[i]:_MethodIndex[i+1]]
}

var _MethodValues = []Method{0, 1, 2, 3}

var _MethodNames = []string{"GET", "POST", "PUT", "PATCH"}

var _MethodNameToValueMap = map[string]Method{
	_MethodName[0:3]:   0,
	_MethodName[3:7]:   1,
	_MethodName[7:10]:  2,
	_MethodName[10:15]: 3,
}

// MethodString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func MethodString(s string) (Method, error) {

	if val, ok := _MethodNameToValueMap[s]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to Method values", s)
}

func ParseMethod(s string) (Method, error) {
	return MethodString(s)
}

// MethodValues returns all values of the enum
func MethodValues() []Method {
	return _MethodValues
}

func MethodNames() []string {
	return _MethodNames
}

// IsAMethod returns "true" if the value is listed in the enum definition. "false" otherwise
func (i Method) IsAMethod() bool {
	for _, v := range _MethodValues {
		if i == v {
			return true
		}
	}
	return false
}

// MarshalJSON implements the json.Marshaler interface for Method
func (i Method) MarshalJSON() ([]byte, error) {
	return json.Marshal(i.String())
}

// UnmarshalJSON implements the json.Unmarshaler interface for Method
func (i *Method) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("Method should be a string, got %s", data)
	}

	var err error
	*i, err = MethodString(s)
	return err
}

// MarshalText implements the encoding.TextMarshaler interface for Method
func (i Method) MarshalText() ([]byte, error) {
	return []byte(i.String()), nil
}

// UnmarshalText implements the encoding.TextUnmarshaler interface for Method
func (i *Method) UnmarshalText(text []byte) error {
	var err error
	*i, err = MethodString(string(text))
	return err
}

// MarshalYAML implements a YAML Marshaler for Method
func (i Method) MarshalYAML() (interface{}, error) {
	return i.String(), nil
}

// UnmarshalYAML implements a YAML Unmarshaler for Method
func (i *Method) UnmarshalYAML(unmarshal func(interface{}) error) error {
	var s string
	if err := unmarshal(&s); err != nil {
		return err
	}

	var err error
	*i, err = MethodString(s)
	return err
}

func (i Method) Value() (driver.Value, error) {
	return i.String(), nil
}

func (i *Method) Scan(value interface{}) error {
	if value == nil {
		return nil
	}

	str, ok := value.(string)
	if !ok {
		bytes, ok := value.([]byte)
		if !ok {
			return fmt.Errorf("value is not a byte slice")
		}

		str = string(bytes[:])
	}

	val, err := MethodString(str)
	if err != nil {
		return err
	}

	*i = val
	return nil
}
